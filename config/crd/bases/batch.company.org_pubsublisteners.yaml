---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: pubsublisteners.batch.company.org
spec:
  group: batch.company.org
  names:
    kind: PubSubListener
    listKind: PubSubListenerList
    plural: pubsublisteners
    singular: pubsublistener
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: PubSubListener is the Schema for the pubsublisteners API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PubSubListenerSpec defines the desired state of PubSubListener
            properties:
              failedJobsHistoryLimit:
                description: The number of failed finished jobs to retain. This is
                  a pointer to distinguish between explicit zero and not specified.
                format: int32
                minimum: 0
                type: integer
              schedule:
                description: "A Time represents an instant in time with nanosecond
                  precision. \n Programs using times should typically store and pass
                  them as values, not pointers. That is, time variables and struct
                  fields should be of type time.Time, not *time.Time. \n A Time value
                  can be used by multiple goroutines simultaneously except that the
                  methods GobDecode, UnmarshalBinary, UnmarshalJSON and UnmarshalText
                  are not concurrency-safe. \n Time instants can be compared using
                  the Before, After, and Equal methods. The Sub method subtracts two
                  instants, producing a Duration. The Add method adds a Time and a
                  Duration, producing a Time. \n The zero value of type Time is January
                  1, year 1, 00:00:00.000000000 UTC. As this time is unlikely to come
                  up in practice, the IsZero method gives a simple way of detecting
                  a time that has not been initialized explicitly. \n Each Time has
                  associated with it a Location, consulted when computing the presentation
                  form of the time, such as in the Format, Hour, and Year methods.
                  The methods Local, UTC, and In return a Time with a specific location.
                  Changing the location in this way changes only the presentation;
                  it does not change the instant in time being denoted and therefore
                  does not affect the computations described in earlier paragraphs.
                  \n Representations of a Time value saved by the GobEncode, MarshalBinary,
                  MarshalJSON, and MarshalText methods store the Time.Location's offset,
                  but not the location name. They therefore lose information about
                  Daylight Saving Time. \n In addition to the required “wall clock”
                  reading, a Time may contain an optional reading of the current process's
                  monotonic clock, to provide additional precision for comparison
                  or subtraction. See the “Monotonic Clocks” section in the package
                  documentation for details. \n Note that the Go == operator compares
                  not just the time instant but also the Location and the monotonic
                  clock reading. Therefore, Time values should not be used as map
                  or database keys without first guaranteeing that the identical Location
                  has been set for all values, which can be achieved through use of
                  the UTC or Local method, and that the monotonic clock reading has
                  been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)
                  to t == u, since t.Equal uses the most accurate comparison available
                  and correctly handles the case when only one of its arguments has
                  a monotonic clock reading."
                properties:
                  inner:
                    allOf:
                    - items:
                        description: A zone represents a single time zone such as
                          CET.
                        type: string
                    - items:
                        description: A zoneTrans represents a single time zone transition.
                        format: int64
                        type: integer
                    description: loc specifies the Location that should be used to
                      determine the minute, hour, month, day, and year that correspond
                      to this Time. The nil location means UTC. All UTC times are
                      represented with loc==nil, never loc==&utcLoc.
                    format: int64
                    type: string
                required:
                - inner
                type: object
              subscriptionname:
                description: deployment should match the name of the pubsub subscription
                minLength: 0
                type: string
              successfulJobsHistoryLimit:
                description: The number of successful finished jobs to retain. This
                  is a pointer to distinguish between explicit zero and not specified.
                format: int32
                minimum: 0
                type: integer
              suspend:
                description: This flag tells the controller to suspend subsequent
                  executions, it does not apply to already started executions.  Defaults
                  to false.
                type: boolean
            required:
            - schedule
            type: object
          status:
            description: PubSubListenerStatus defines the observed state of PubSubListener
            properties:
              lastScheduleTime:
                description: Information when was the last time the job was successfully
                  scheduled.
                format: date-time
                type: string
              subscriptionpuller:
                description: A list of pointers to current deployments
                items:
                  description: 'ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, "must refer only to types A and B" or "UID not honored"
                    or "name must be restricted". Those cannot be well described when
                    embedded. 3. Inconsistent validation.  Because the usages are
                    different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don''t make new APIs embed an underspecified
                    API type they do not control. Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    .'
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
